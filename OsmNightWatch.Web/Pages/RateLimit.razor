@page "/RateLimit"

<PageTitle>Rate Limiting Changesets</PageTitle>

@using OsmNightWatch.Web.Data
@using OsmNightWatch.Lib
@inject IssuesDataService IssuesDataService

<h1>Rate Limiting Changesets</h1>
<b>WORK IN PROGRESS! I did not check if algorithm is 100% same...</b>
<br />
This page tries to show effect of implementing <a href="https://github.com/openstreetmap/openstreetmap-website/pull/4319">PR 4319: Add the ability to rate limit edits</a>
@if (issuesData == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Account</th>
                <th>Timestamp</th>
                <th>OSM link</th>
                <th>Reason</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var account in issuesData.OrderByDescending(ig => ig.Changesets.Max(c => c.Timestamp)))
            {
                <tr>
                    <td colspan="4" class="bg-light">
                        <a class="btn btn-success" style="margin-right: 5px;" href="https://www.openstreetmap.org/user/@account.Username" target="_blank">@account.Username</a>
                        @if (account.Deleted)
                        {
                            <a class="btn btn-danger" href="https://www.openstreetmap.org/user/@account.Username" target="_blank">Deleted</a>
                            <br />
                        }
                        else
                        {
                            if (account.Blocked)
                            {
                                <a class="btn btn-warning" href="https://www.openstreetmap.org/user/@account.Username/blocks" target="_blank">Blocked</a>
                            }
                            <br />
                            @if (@account.CreatedDate.Year < 2050)
                            {
                                <span>Created: @account.CreatedDate (<b>@ToReadableString(DateTime.UtcNow - account.CreatedDate)</b>)</span>
                                <br />
                            }
                        }
                        @if (@account.CreatedDate != @account.FirstChangesetDate)
                        {
                            <span>First Changeset: @account.FirstChangesetDate (<b>@ToReadableString(DateTime.UtcNow - account.FirstChangesetDate)</b>)</span>
                            <br />
                        }
                        <span>Total Changesets: <b>@account.TotalChangesets</b></span>
                    </td>
                </tr>
                foreach (var changeset in account.Changesets.OrderByDescending(c => c.Timestamp))
                {
                    <tr>
                        <td></td>
                        <td>@changeset.Timestamp!.ToString("yyyy-MM-dd HH:mm:ss")</td>
                        <td><a href="https://www.openstreetmap.org/changeset/@changeset.Id" target="_blank">Changeset @changeset.Id</a></td>
                        <td style="white-space: pre-line">@string.Join("\n",changeset.Reasons)</td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {

    public string ToReadableString(TimeSpan span)
    {
        string formatted = string.Format("{0}{1}{2}",
            span.Duration().Days > 0 ? string.Format("{0:0} day{1}, ", span.Days, span.Days == 1 ? string.Empty : "s") : string.Empty,
            span.Duration().Hours > 0 ? string.Format("{0:0} hour{1}, ", span.Hours, span.Hours == 1 ? string.Empty : "s") : string.Empty,
            span.Duration().Minutes > 0 ? string.Format("{0:0} minute{1}, ", span.Minutes, span.Minutes == 1 ? string.Empty : "s") : string.Empty);

        if (formatted.EndsWith(", ")) formatted = formatted.Substring(0, formatted.Length - 2);

        if (string.IsNullOrEmpty(formatted)) formatted = "0 seconds";
        formatted += " ago";
        return formatted;
    }

    private RateLimitedAccount[]? issuesData;

    protected override async Task OnInitializedAsync()
    {
        issuesData = await IssuesDataService.GetSuspiciousDataAsync();
    }
}
