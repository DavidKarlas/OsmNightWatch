@page "/"

<PageTitle>OSM Issues Overview</PageTitle>

@using OsmNightWatch.Web.Data
@using OsmNightWatch.Lib
@inject IssuesDataService IssuesDataService
@inject NavigationManager NavigationManager

<h1>OSM Issues Overview</h1>

<p>Here is a list of current OSM issues. Let's fix them all.</p>

@if (issuesData == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Issue type</th>
                <th>Number of issues</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var issueType in allIssueTypes)
            {
                numberOfIssues = @issuesData.AllIssues?.Where(issue => issue.IssueType == issueType).Count();
                <tr style="color:@TextColor(@numberOfIssues.GetValueOrDefault());">
                    <td style="cursor:pointer" @onclick="() => Navigate(issueType)">@issueType</td>
                    <td>@numberOfIssues</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IssuesData? issuesData;
    private int? numberOfIssues;
    private List<string> allIssueTypes = new() { "OpenAdminPolygon", "BrokenCoastLine" };
    private Dictionary<string, string> pagesDict = new() {
        {"OpenAdminPolygon", "OpenAdminPolygons" },
        {"BrokenCoastLine", "BrokenWaterCoastlines" }
    };

    protected override async Task OnInitializedAsync()
    {
        issuesData = await IssuesDataService.GetIssuesDataAsync();
    }

    private string TextColor(int nunberOfIssues)
    {
        switch (nunberOfIssues)
        {
            case 0:
                return "green";
            default:
                return "red";
        }
    }

    private void Navigate(string issueType) => NavigationManager.NavigateTo("/" + pagesDict[issueType]);
}
