@page "/BrokenWaterCoastlines"

<PageTitle>Broken Water Coastlines</PageTitle>

@using OsmNightWatch.Web.Data
@using OsmNightWatch.Lib
@inject IssuesDataService IssuesDataService

<h1>Broken water coastlines</h1>

<p>Here is a list of all broken water coastlines.</p>

@if (issuesData == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>First time seen</th>
                <th>OSM link</th>
                <th>Additional details</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var issuesByDay in issuesData.AllIssues.Where(issue => issue.IssueType == "BrokenCoastLine").GroupBy(i => i.FirstTimeSeen.Value.Date).OrderByDescending(ig => ig.Key))
            {
                <tr>
                    <td>@issuesByDay.Key.ToString("yyyy-MM-dd  -  dddd")</td>
                    <td></td>
                    <td></td>
                </tr>
                foreach (var issue in issuesByDay.OrderByDescending(i => i.FirstTimeSeen).ThenBy(i => i.OsmType).ThenBy(i => i.OsmId))
                {
                    <tr>
                        <td>@issue.FirstTimeSeen!.Value.ToString("yyyy-MM-dd HH:mm:ss")</td>
                        <td><a href="https://www.openstreetmap.org/@Helper.ConvertToFullOsmType(issue.OsmType)/@issue.OsmId" target="_blank">@issue.OsmType.ToUpper()[0]@issue.OsmId</a></td>
                        <td>@issue.Details</td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    private IssuesData? issuesData;

    protected override async Task OnInitializedAsync()
    {
        issuesData = await IssuesDataService.GetIssuesDataAsync();
    }
}
